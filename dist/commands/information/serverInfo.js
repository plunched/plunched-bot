"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
const date_fns_1 = require("date-fns");
const db_1 = require("../../db");
class botInviteCommand extends discord_akairo_1.Command {
    constructor() {
        super("serverInfo", {
            aliases: ["serverInfo", "server-info", "server"],
            category: "information",
            description: {
                content: "Gives you information about the server.",
                usage: "server-Info",
                examples: ["server-info", "server"],
            },
            ratelimit: 3,
        });
    }
    async exec(message) {
        const onlineMembers = (await message.guild.fetch())
            .approximatePresenceCount;
        const textChannels = message.guild.channels.cache.filter((channel) => channel.type === "text").size;
        const voiceChannels = message.guild.channels.cache.filter((channel) => channel.type === "voice").size;
        const totalCommands = await db_1.pool.query("SELECT totalCommands FROM guilds WHERE guildID = $1", [message.guild.id]);
        message.util.send(new discord_js_1.MessageEmbed()
            .setColor(this.client.colors.default)
            .setTitle(`${message.guild.name}`)
            .addFields({
            name: `id`,
            value: `${message.guild.id}`,
            inline: true,
        }, {
            name: "owner",
            value: `<@${message.guild.ownerID}>`,
            inline: true,
        }, {
            name: "members",
            value: `${this.client.emotes.online} ${onlineMembers} online  |  ${this.client.emotes.offline} ${message.guild.memberCount} offline`,
            inline: false,
        }, {
            name: "channels",
            value: `# ${textChannels} text  |  ${voiceChannels} voice`,
            inline: false,
        }, {
            name: "total commands",
            value: `${totalCommands.rows[0].totalcommands}`,
            inline: true,
        }, {
            name: "ban count",
            value: await (await message.guild.fetchBans()).size,
            inline: true,
        })
            .setImage(message.guild.icon)
            .setFooter(`created: ${message.guild.createdAt.toDateString()} | (${date_fns_1.formatDistanceToNow(message.guild.createdTimestamp)} ago)`));
    }
}
exports.default = botInviteCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVySW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9pbmZvcm1hdGlvbi9zZXJ2ZXJJbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQXlDO0FBQ3pDLDJDQUFtRDtBQUNuRCx1Q0FBK0M7QUFDL0MsaUNBQWdDO0FBRWhDLE1BQXFCLGdCQUFpQixTQUFRLHdCQUFPO0lBQ25EO1FBQ0UsS0FBSyxDQUFDLFlBQVksRUFBRTtZQUNsQixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsYUFBYSxFQUFFLFFBQVEsQ0FBQztZQUNoRCxRQUFRLEVBQUUsYUFBYTtZQUN2QixXQUFXLEVBQUU7Z0JBQ1gsT0FBTyxFQUFFLHlDQUF5QztnQkFDbEQsS0FBSyxFQUFFLGFBQWE7Z0JBQ3BCLFFBQVEsRUFBRSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUM7YUFDcEM7WUFDRCxTQUFTLEVBQUUsQ0FBQztTQUNiLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQWdCO1FBQ2hDLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ2hELHdCQUF3QixDQUFDO1FBRTVCLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQ3RELENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FDckMsQ0FBQyxJQUFJLENBQUM7UUFFUCxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUN2RCxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxPQUFPLENBQ3RDLENBQUMsSUFBSSxDQUFDO1FBRVAsTUFBTSxhQUFhLEdBQUcsTUFBTSxTQUFJLENBQUMsS0FBSyxDQUNwQyxxREFBcUQsRUFDckQsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUNuQixDQUFDO1FBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ2YsSUFBSSx5QkFBWSxFQUFFO2FBQ2YsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQzthQUNwQyxRQUFRLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2pDLFNBQVMsQ0FDUjtZQUNFLElBQUksRUFBRSxJQUFJO1lBQ1YsS0FBSyxFQUFFLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDNUIsTUFBTSxFQUFFLElBQUk7U0FDYixFQUNEO1lBQ0UsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsS0FBSyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRztZQUNwQyxNQUFNLEVBQUUsSUFBSTtTQUNiLEVBQ0Q7WUFDRSxJQUFJLEVBQUUsU0FBUztZQUNmLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxhQUFhLGVBQWUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxVQUFVO1lBQ3BJLE1BQU0sRUFBRSxLQUFLO1NBQ2QsRUFDRDtZQUNFLElBQUksRUFBRSxVQUFVO1lBQ2hCLEtBQUssRUFBRSxLQUFLLFlBQVksYUFBYSxhQUFhLFFBQVE7WUFDMUQsTUFBTSxFQUFFLEtBQUs7U0FDZCxFQUNEO1lBQ0UsSUFBSSxFQUFFLGdCQUFnQjtZQUN0QixLQUFLLEVBQUUsR0FBRyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRTtZQUMvQyxNQUFNLEVBQUUsSUFBSTtTQUNiLEVBQ0Q7WUFDRSxJQUFJLEVBQUUsV0FBVztZQUNqQixLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLElBQUk7WUFDbkQsTUFBTSxFQUFFLElBQUk7U0FDYixDQUNGO2FBQ0EsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2FBQzVCLFNBQVMsQ0FDUixZQUFZLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxPQUFPLDhCQUFtQixDQUMxRSxPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUMvQixPQUFPLENBQ1QsQ0FDSixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBMUVELG1DQTBFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiZGlzY29yZC1ha2Fpcm9cIjtcclxuaW1wb3J0IHsgTWVzc2FnZSwgTWVzc2FnZUVtYmVkIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcclxuaW1wb3J0IHsgZm9ybWF0RGlzdGFuY2VUb05vdyB9IGZyb20gXCJkYXRlLWZuc1wiO1xyXG5pbXBvcnQgeyBwb29sIH0gZnJvbSBcIi4uLy4uL2RiXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBib3RJbnZpdGVDb21tYW5kIGV4dGVuZHMgQ29tbWFuZCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihcInNlcnZlckluZm9cIiwge1xyXG4gICAgICBhbGlhc2VzOiBbXCJzZXJ2ZXJJbmZvXCIsIFwic2VydmVyLWluZm9cIiwgXCJzZXJ2ZXJcIl0sXHJcbiAgICAgIGNhdGVnb3J5OiBcImluZm9ybWF0aW9uXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiB7XHJcbiAgICAgICAgY29udGVudDogXCJHaXZlcyB5b3UgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNlcnZlci5cIixcclxuICAgICAgICB1c2FnZTogXCJzZXJ2ZXItSW5mb1wiLFxyXG4gICAgICAgIGV4YW1wbGVzOiBbXCJzZXJ2ZXItaW5mb1wiLCBcInNlcnZlclwiXSxcclxuICAgICAgfSxcclxuICAgICAgcmF0ZWxpbWl0OiAzLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZXhlYyhtZXNzYWdlOiBNZXNzYWdlKSB7XHJcbiAgICBjb25zdCBvbmxpbmVNZW1iZXJzID0gKGF3YWl0IG1lc3NhZ2UuZ3VpbGQuZmV0Y2goKSlcclxuICAgICAgLmFwcHJveGltYXRlUHJlc2VuY2VDb3VudDtcclxuXHJcbiAgICBjb25zdCB0ZXh0Q2hhbm5lbHMgPSBtZXNzYWdlLmd1aWxkLmNoYW5uZWxzLmNhY2hlLmZpbHRlcihcclxuICAgICAgKGNoYW5uZWwpID0+IGNoYW5uZWwudHlwZSA9PT0gXCJ0ZXh0XCJcclxuICAgICkuc2l6ZTtcclxuXHJcbiAgICBjb25zdCB2b2ljZUNoYW5uZWxzID0gbWVzc2FnZS5ndWlsZC5jaGFubmVscy5jYWNoZS5maWx0ZXIoXHJcbiAgICAgIChjaGFubmVsKSA9PiBjaGFubmVsLnR5cGUgPT09IFwidm9pY2VcIlxyXG4gICAgKS5zaXplO1xyXG5cclxuICAgIGNvbnN0IHRvdGFsQ29tbWFuZHMgPSBhd2FpdCBwb29sLnF1ZXJ5KFxyXG4gICAgICBcIlNFTEVDVCB0b3RhbENvbW1hbmRzIEZST00gZ3VpbGRzIFdIRVJFIGd1aWxkSUQgPSAkMVwiLFxyXG4gICAgICBbbWVzc2FnZS5ndWlsZC5pZF1cclxuICAgICk7XHJcbiAgICBtZXNzYWdlLnV0aWwuc2VuZChcclxuICAgICAgbmV3IE1lc3NhZ2VFbWJlZCgpXHJcbiAgICAgICAgLnNldENvbG9yKHRoaXMuY2xpZW50LmNvbG9ycy5kZWZhdWx0KVxyXG4gICAgICAgIC5zZXRUaXRsZShgJHttZXNzYWdlLmd1aWxkLm5hbWV9YClcclxuICAgICAgICAuYWRkRmllbGRzKFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiBgaWRgLFxyXG4gICAgICAgICAgICB2YWx1ZTogYCR7bWVzc2FnZS5ndWlsZC5pZH1gLFxyXG4gICAgICAgICAgICBpbmxpbmU6IHRydWUsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiBcIm93bmVyXCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiBgPEAke21lc3NhZ2UuZ3VpbGQub3duZXJJRH0+YCxcclxuICAgICAgICAgICAgaW5saW5lOiB0cnVlLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogXCJtZW1iZXJzXCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiBgJHt0aGlzLmNsaWVudC5lbW90ZXMub25saW5lfSAke29ubGluZU1lbWJlcnN9IG9ubGluZSAgfCAgJHt0aGlzLmNsaWVudC5lbW90ZXMub2ZmbGluZX0gJHttZXNzYWdlLmd1aWxkLm1lbWJlckNvdW50fSBvZmZsaW5lYCxcclxuICAgICAgICAgICAgaW5saW5lOiBmYWxzZSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiY2hhbm5lbHNcIixcclxuICAgICAgICAgICAgdmFsdWU6IGAjICR7dGV4dENoYW5uZWxzfSB0ZXh0ICB8ICAke3ZvaWNlQ2hhbm5lbHN9IHZvaWNlYCxcclxuICAgICAgICAgICAgaW5saW5lOiBmYWxzZSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwidG90YWwgY29tbWFuZHNcIixcclxuICAgICAgICAgICAgdmFsdWU6IGAke3RvdGFsQ29tbWFuZHMucm93c1swXS50b3RhbGNvbW1hbmRzfWAsXHJcbiAgICAgICAgICAgIGlubGluZTogdHJ1ZSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiYmFuIGNvdW50XCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiBhd2FpdCAoYXdhaXQgbWVzc2FnZS5ndWlsZC5mZXRjaEJhbnMoKSkuc2l6ZSxcclxuICAgICAgICAgICAgaW5saW5lOiB0cnVlLFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIClcclxuICAgICAgICAuc2V0SW1hZ2UobWVzc2FnZS5ndWlsZC5pY29uKVxyXG4gICAgICAgIC5zZXRGb290ZXIoXHJcbiAgICAgICAgICBgY3JlYXRlZDogJHttZXNzYWdlLmd1aWxkLmNyZWF0ZWRBdC50b0RhdGVTdHJpbmcoKX0gfCAoJHtmb3JtYXREaXN0YW5jZVRvTm93KFxyXG4gICAgICAgICAgICBtZXNzYWdlLmd1aWxkLmNyZWF0ZWRUaW1lc3RhbXBcclxuICAgICAgICAgICl9IGFnbylgXHJcbiAgICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19