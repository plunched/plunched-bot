"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
class helpCommand extends discord_akairo_1.Command {
    constructor() {
        super("help", {
            aliases: ["help", "commands", "cmds"],
            category: "information",
            description: {
                content: "Helps you out with any command",
                usage: "help <command>",
                examples: ["links", "help ping"],
                Permissions: "Ban members or moderator role!"
            },
            ratelimit: 3,
            args: [
                {
                    id: "command",
                    type: "commandAlias",
                },
            ],
        });
    }
    exec(message, { command }) {
        if (command) {
            let commandEmbed = new discord_js_1.MessageEmbed()
                .setTitle(`Help ${command}`)
                .setColor(this.client.colors.default)
                .addField("Usage:", `\`${command.description.usage || "No usage provide."}\``);
            if (command.userPermissions) {
                commandEmbed.addField("Examples:", `\`${command.description.examples
                    ? command.description.examples.map((e) => `${e}`).join("\n")
                    : "no examples provided."}\``);
            }
            commandEmbed.addField("Aliases:", `\`${command.aliases
                ? command.aliases.map((e) => `${e}`).join(", ")
                : "no examples provided."}\``);
            if (command.description.Permissions) {
                commandEmbed.addField("Permissions:", `${command.description.Permissions}`);
            }
            return message.util.send(commandEmbed);
        }
        const embed = new discord_js_1.MessageEmbed()
            .setAuthor(message.member.user.tag, message.author.displayAvatarURL({ dynamic: true }))
            .setTitle("Help command.")
            .setDescription(`**usage:** \`${message.util.parsed.prefix}${this.description.usage}\``)
            .setColor(this.client.colors.default)
            .setTimestamp()
            .setFooter(this.client.user.tag, this.client.user.displayAvatarURL());
        for (const category of this.handler.categories.values()) {
            if (["default"].includes(category.id))
                continue;
            embed.addField(category.id, category
                .filter((cmd) => cmd.aliases.length > 0)
                .map((cmd) => `\`${cmd}\``)
                .join(", " || "No commands in category."));
        }
        return message.channel.send(embed);
    }
}
exports.default = helpCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9pbmZvcm1hdGlvbi9oZWxwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQXlDO0FBQ3pDLDJDQUFtRDtBQUVuRCxNQUFxQixXQUFZLFNBQVEsd0JBQU87SUFDOUM7UUFDRSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ1osT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUM7WUFDckMsUUFBUSxFQUFFLGFBQWE7WUFDdkIsV0FBVyxFQUFFO2dCQUNYLE9BQU8sRUFBRSxnQ0FBZ0M7Z0JBQ3pDLEtBQUssRUFBRSxnQkFBZ0I7Z0JBQ3ZCLFFBQVEsRUFBRSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUM7Z0JBQ2hDLFdBQVcsRUFBRSxnQ0FBZ0M7YUFDOUM7WUFDRCxTQUFTLEVBQUUsQ0FBQztZQUNaLElBQUksRUFBRTtnQkFDSjtvQkFDRSxFQUFFLEVBQUUsU0FBUztvQkFDYixJQUFJLEVBQUUsY0FBYztpQkFDckI7YUFDRjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxJQUFJLENBQ1QsT0FBZ0IsRUFDaEIsRUFBRSxPQUFPLEVBQXdCO1FBRWpDLElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBSSxZQUFZLEdBQUcsSUFBSSx5QkFBWSxFQUFFO2lCQUNsQyxRQUFRLENBQUMsUUFBUSxPQUFPLEVBQUUsQ0FBQztpQkFDM0IsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztpQkFDcEMsUUFBUSxDQUNQLFFBQVEsRUFDUixLQUFLLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLG1CQUFtQixJQUFJLENBQzFELENBQUM7WUFFSixJQUFJLE9BQU8sQ0FBQyxlQUFlLEVBQUU7Z0JBQzNCLFlBQVksQ0FBQyxRQUFRLENBQ25CLFdBQVcsRUFDWCxLQUNFLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUTtvQkFDMUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7b0JBQzVELENBQUMsQ0FBQyx1QkFDTixJQUFJLENBQ0wsQ0FBQzthQUNIO1lBRUQsWUFBWSxDQUFDLFFBQVEsQ0FDbkIsVUFBVSxFQUNWLEtBQ0UsT0FBTyxDQUFDLE9BQU87Z0JBQ2IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDL0MsQ0FBQyxDQUFDLHVCQUNOLElBQUksQ0FDTCxDQUFDO1lBRUYsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRTtnQkFDbkMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7YUFDN0U7WUFFRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3hDO1FBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSx5QkFBWSxFQUFFO2FBQzdCLFNBQVMsQ0FDUixPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQ3ZCLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDbkQ7YUFDQSxRQUFRLENBQUMsZUFBZSxDQUFDO2FBQ3pCLGNBQWMsQ0FDYixnQkFBZ0IsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLENBQ3hFO2FBQ0EsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQzthQUNwQyxZQUFZLEVBQUU7YUFDZCxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUV4RSxLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3ZELElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztnQkFBRSxTQUFTO1lBRWhELEtBQUssQ0FBQyxRQUFRLENBQ1osUUFBUSxDQUFDLEVBQUUsRUFDWCxRQUFRO2lCQUNMLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2lCQUN2QyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7aUJBQzFCLElBQUksQ0FBQyxJQUFJLElBQUksMEJBQTBCLENBQUMsQ0FDNUMsQ0FBQztTQUNIO1FBRUQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBQ0Y7QUF4RkQsOEJBd0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCJkaXNjb3JkLWFrYWlyb1wiO1xyXG5pbXBvcnQgeyBNZXNzYWdlLCBNZXNzYWdlRW1iZWQgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgaGVscENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFwiaGVscFwiLCB7XHJcbiAgICAgIGFsaWFzZXM6IFtcImhlbHBcIiwgXCJjb21tYW5kc1wiLCBcImNtZHNcIl0sXHJcbiAgICAgIGNhdGVnb3J5OiBcImluZm9ybWF0aW9uXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiB7XHJcbiAgICAgICAgY29udGVudDogXCJIZWxwcyB5b3Ugb3V0IHdpdGggYW55IGNvbW1hbmRcIixcclxuICAgICAgICB1c2FnZTogXCJoZWxwIDxjb21tYW5kPlwiLFxyXG4gICAgICAgIGV4YW1wbGVzOiBbXCJsaW5rc1wiLCBcImhlbHAgcGluZ1wiXSxcclxuICAgICAgICBQZXJtaXNzaW9uczogXCJCYW4gbWVtYmVycyBvciBtb2RlcmF0b3Igcm9sZSFcIlxyXG4gICAgICB9LFxyXG4gICAgICByYXRlbGltaXQ6IDMsXHJcbiAgICAgIGFyZ3M6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogXCJjb21tYW5kXCIsXHJcbiAgICAgICAgICB0eXBlOiBcImNvbW1hbmRBbGlhc1wiLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIF0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBleGVjKFxyXG4gICAgbWVzc2FnZTogTWVzc2FnZSxcclxuICAgIHsgY29tbWFuZCB9OiB7IGNvbW1hbmQ6IENvbW1hbmQgfVxyXG4gICk6IFByb21pc2U8TWVzc2FnZT4ge1xyXG4gICAgaWYgKGNvbW1hbmQpIHtcclxuICAgICAgbGV0IGNvbW1hbmRFbWJlZCA9IG5ldyBNZXNzYWdlRW1iZWQoKVxyXG4gICAgICAgIC5zZXRUaXRsZShgSGVscCAke2NvbW1hbmR9YClcclxuICAgICAgICAuc2V0Q29sb3IodGhpcy5jbGllbnQuY29sb3JzLmRlZmF1bHQpXHJcbiAgICAgICAgLmFkZEZpZWxkKFxyXG4gICAgICAgICAgXCJVc2FnZTpcIixcclxuICAgICAgICAgIGBcXGAke2NvbW1hbmQuZGVzY3JpcHRpb24udXNhZ2UgfHwgXCJObyB1c2FnZSBwcm92aWRlLlwifVxcYGBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgaWYgKGNvbW1hbmQudXNlclBlcm1pc3Npb25zKSB7XHJcbiAgICAgICAgY29tbWFuZEVtYmVkLmFkZEZpZWxkKFxyXG4gICAgICAgICAgXCJFeGFtcGxlczpcIixcclxuICAgICAgICAgIGBcXGAke1xyXG4gICAgICAgICAgICBjb21tYW5kLmRlc2NyaXB0aW9uLmV4YW1wbGVzXHJcbiAgICAgICAgICAgICAgPyBjb21tYW5kLmRlc2NyaXB0aW9uLmV4YW1wbGVzLm1hcCgoZSkgPT4gYCR7ZX1gKS5qb2luKFwiXFxuXCIpXHJcbiAgICAgICAgICAgICAgOiBcIm5vIGV4YW1wbGVzIHByb3ZpZGVkLlwiXHJcbiAgICAgICAgICB9XFxgYFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbW1hbmRFbWJlZC5hZGRGaWVsZChcclxuICAgICAgICBcIkFsaWFzZXM6XCIsXHJcbiAgICAgICAgYFxcYCR7XHJcbiAgICAgICAgICBjb21tYW5kLmFsaWFzZXNcclxuICAgICAgICAgICAgPyBjb21tYW5kLmFsaWFzZXMubWFwKChlKSA9PiBgJHtlfWApLmpvaW4oXCIsIFwiKVxyXG4gICAgICAgICAgICA6IFwibm8gZXhhbXBsZXMgcHJvdmlkZWQuXCJcclxuICAgICAgICB9XFxgYFxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKGNvbW1hbmQuZGVzY3JpcHRpb24uUGVybWlzc2lvbnMpIHtcclxuICAgICAgICBjb21tYW5kRW1iZWQuYWRkRmllbGQoXCJQZXJtaXNzaW9uczpcIiwgYCR7Y29tbWFuZC5kZXNjcmlwdGlvbi5QZXJtaXNzaW9uc31gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG1lc3NhZ2UudXRpbC5zZW5kKGNvbW1hbmRFbWJlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZW1iZWQgPSBuZXcgTWVzc2FnZUVtYmVkKClcclxuICAgICAgLnNldEF1dGhvcihcclxuICAgICAgICBtZXNzYWdlLm1lbWJlci51c2VyLnRhZyxcclxuICAgICAgICBtZXNzYWdlLmF1dGhvci5kaXNwbGF5QXZhdGFyVVJMKHsgZHluYW1pYzogdHJ1ZSB9KVxyXG4gICAgICApXHJcbiAgICAgIC5zZXRUaXRsZShcIkhlbHAgY29tbWFuZC5cIilcclxuICAgICAgLnNldERlc2NyaXB0aW9uKFxyXG4gICAgICAgIGAqKnVzYWdlOioqIFxcYCR7bWVzc2FnZS51dGlsLnBhcnNlZC5wcmVmaXh9JHt0aGlzLmRlc2NyaXB0aW9uLnVzYWdlfVxcYGBcclxuICAgICAgKVxyXG4gICAgICAuc2V0Q29sb3IodGhpcy5jbGllbnQuY29sb3JzLmRlZmF1bHQpXHJcbiAgICAgIC5zZXRUaW1lc3RhbXAoKVxyXG4gICAgICAuc2V0Rm9vdGVyKHRoaXMuY2xpZW50LnVzZXIudGFnLCB0aGlzLmNsaWVudC51c2VyLmRpc3BsYXlBdmF0YXJVUkwoKSk7XHJcblxyXG4gICAgZm9yIChjb25zdCBjYXRlZ29yeSBvZiB0aGlzLmhhbmRsZXIuY2F0ZWdvcmllcy52YWx1ZXMoKSkge1xyXG4gICAgICBpZiAoW1wiZGVmYXVsdFwiXS5pbmNsdWRlcyhjYXRlZ29yeS5pZCkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgZW1iZWQuYWRkRmllbGQoXHJcbiAgICAgICAgY2F0ZWdvcnkuaWQsXHJcbiAgICAgICAgY2F0ZWdvcnlcclxuICAgICAgICAgIC5maWx0ZXIoKGNtZCkgPT4gY21kLmFsaWFzZXMubGVuZ3RoID4gMClcclxuICAgICAgICAgIC5tYXAoKGNtZCkgPT4gYFxcYCR7Y21kfVxcYGApXHJcbiAgICAgICAgICAuam9pbihcIiwgXCIgfHwgXCJObyBjb21tYW5kcyBpbiBjYXRlZ29yeS5cIilcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbWVzc2FnZS5jaGFubmVsLnNlbmQoZW1iZWQpO1xyXG4gIH1cclxufVxyXG4iXX0=