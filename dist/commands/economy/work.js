"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const db_1 = require("../../db");
class WorkCommand extends discord_akairo_1.Command {
    constructor() {
        super("work", {
            aliases: ["work"],
            category: "economy",
            description: {
                content: "Gives you money for you to work",
            },
        });
    }
    async exec(message) {
        await db_1.pool.query("INSERT INTO users (userID, job) VALUES($1, $2) ON CONFLICT DO NOTHING", [message.author.id, "garbage-collecter"]);
        let user = await db_1.pool.query("SELECT * FROM users WHERE userID = $1", [
            message.author.id,
        ]);
        if (message.author.id != this.client.ownerID) {
            if (user.rows[0].premiumacc) {
                if (Date.now() - user.rows[0].lastworkcommand < 3e6)
                    return message.util.send("Take the chill pill");
            }
            if (Date.now() - user.rows[0].lastworkcommand < 6e6)
                return message.util.send("Take the chill pill");
        }
        let randomCoins = 0;
        if (user.rows[0].job == "garbage-collecter") {
            randomCoins = Math.floor(Math.random() * 300) + 100;
        }
        await db_1.pool.query(`UPDATE users
    SET cash = cash + $1
    WHERE userID = $2`, [randomCoins, message.author.id]);
        return message.util.send(`You've got ${randomCoins}${this.client.emotes.coin} for you job as \`${user.rows[0].job}\``);
    }
}
exports.default = WorkCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29yay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lY29ub215L3dvcmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBeUM7QUFFekMsaUNBQWdDO0FBRWhDLE1BQXFCLFdBQVksU0FBUSx3QkFBTztJQUM5QztRQUNFLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDWixPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUM7WUFDakIsUUFBUSxFQUFFLFNBQVM7WUFDbkIsV0FBVyxFQUFFO2dCQUNYLE9BQU8sRUFBRSxpQ0FBaUM7YUFDM0M7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFnQjtRQUN6QixNQUFNLFNBQUksQ0FBQyxLQUFLLENBQ2QsdUVBQXVFLEVBQ3ZFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FDekMsQ0FBQztRQUVGLElBQUksSUFBSSxHQUFHLE1BQU0sU0FBSSxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRTtZQUNuRSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7U0FDbEIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUM1QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFO2dCQUMzQixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsR0FBRyxHQUFHO29CQUNqRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7YUFDbkQ7WUFDRCxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsR0FBRyxHQUFHO2dCQUNqRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDbkQ7UUFFRCxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDcEIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxtQkFBbUIsRUFBRTtZQUMzQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ3JEO1FBRUQsTUFBTSxTQUFJLENBQUMsS0FBSyxDQUNkOztzQkFFZ0IsRUFDaEIsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FDakMsQ0FBQztRQUVGLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3RCLGNBQWMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUkscUJBQXFCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQzdGLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUE3Q0QsOEJBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCJkaXNjb3JkLWFrYWlyb1wiO1xyXG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcclxuaW1wb3J0IHsgcG9vbCB9IGZyb20gXCIuLi8uLi9kYlwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29ya0NvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFwid29ya1wiLCB7XHJcbiAgICAgIGFsaWFzZXM6IFtcIndvcmtcIl0sXHJcbiAgICAgIGNhdGVnb3J5OiBcImVjb25vbXlcIixcclxuICAgICAgZGVzY3JpcHRpb246IHtcclxuICAgICAgICBjb250ZW50OiBcIkdpdmVzIHlvdSBtb25leSBmb3IgeW91IHRvIHdvcmtcIixcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZXhlYyhtZXNzYWdlOiBNZXNzYWdlKTogUHJvbWlzZTxNZXNzYWdlPiB7XHJcbiAgICBhd2FpdCBwb29sLnF1ZXJ5KFxyXG4gICAgICBcIklOU0VSVCBJTlRPIHVzZXJzICh1c2VySUQsIGpvYikgVkFMVUVTKCQxLCAkMikgT04gQ09ORkxJQ1QgRE8gTk9USElOR1wiLFxyXG4gICAgICBbbWVzc2FnZS5hdXRob3IuaWQsIFwiZ2FyYmFnZS1jb2xsZWN0ZXJcIl1cclxuICAgICk7XHJcblxyXG4gICAgbGV0IHVzZXIgPSBhd2FpdCBwb29sLnF1ZXJ5KFwiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VySUQgPSAkMVwiLCBbXHJcbiAgICAgIG1lc3NhZ2UuYXV0aG9yLmlkLFxyXG4gICAgXSk7XHJcbiAgICBpZiAobWVzc2FnZS5hdXRob3IuaWQgIT0gdGhpcy5jbGllbnQub3duZXJJRCkge1xyXG4gICAgICBpZiAodXNlci5yb3dzWzBdLnByZW1pdW1hY2MpIHtcclxuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHVzZXIucm93c1swXS5sYXN0d29ya2NvbW1hbmQgPCAzZTYpXHJcbiAgICAgICAgICByZXR1cm4gbWVzc2FnZS51dGlsLnNlbmQoXCJUYWtlIHRoZSBjaGlsbCBwaWxsXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChEYXRlLm5vdygpIC0gdXNlci5yb3dzWzBdLmxhc3R3b3JrY29tbWFuZCA8IDZlNilcclxuICAgICAgICByZXR1cm4gbWVzc2FnZS51dGlsLnNlbmQoXCJUYWtlIHRoZSBjaGlsbCBwaWxsXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByYW5kb21Db2lucyA9IDA7XHJcbiAgICBpZiAodXNlci5yb3dzWzBdLmpvYiA9PSBcImdhcmJhZ2UtY29sbGVjdGVyXCIpIHtcclxuICAgICAgcmFuZG9tQ29pbnMgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzMDApICsgMTAwO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IHBvb2wucXVlcnkoXHJcbiAgICAgIGBVUERBVEUgdXNlcnNcclxuICAgIFNFVCBjYXNoID0gY2FzaCArICQxXHJcbiAgICBXSEVSRSB1c2VySUQgPSAkMmAsXHJcbiAgICAgIFtyYW5kb21Db2lucywgbWVzc2FnZS5hdXRob3IuaWRdXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBtZXNzYWdlLnV0aWwuc2VuZChcclxuICAgICAgYFlvdSd2ZSBnb3QgJHtyYW5kb21Db2luc30ke3RoaXMuY2xpZW50LmVtb3Rlcy5jb2lufSBmb3IgeW91IGpvYiBhcyBcXGAke3VzZXIucm93c1swXS5qb2J9XFxgYFxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19