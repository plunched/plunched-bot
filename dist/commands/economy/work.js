"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const db_1 = require("../../db");
class WorkCommand extends discord_akairo_1.Command {
    constructor() {
        super("work", {
            aliases: ["work"],
            category: "economy",
            description: {
                content: "Gives you money for you to work",
            },
        });
    }
    async exec(message) {
        await db_1.pool.query("INSERT INTO users (userID, job) VALUES($1, $2) ON CONFLICT DO NOTHING", [message.author.id, "garbage-collector"]);
        let user = await db_1.pool.query("SELECT * FROM users WHERE userID = $1", [
            message.author.id,
        ]);
        if (message.author.id != this.client.ownerID) {
            if (user.rows[0].premiumacc) {
                if (Date.now() - user.rows[0].lastworkcommand < 3e6)
                    return message.util.send("Take the chill pill");
            }
            if (Date.now() - user.rows[0].lastworkcommand < 6e6)
                return message.util.send("Take the chill pill");
        }
        let randomCoins = 0;
        if (user.rows[0].job === "garbage-collector") {
            randomCoins = Math.floor(Math.random() * 300) + 100;
        }
        await db_1.pool.query(`UPDATE users
    SET cash = cash + $1
    WHERE userID = $2`, [randomCoins, message.author.id]);
        return message.util.send(`You've got **${this.client.emotes.coin}${randomCoins}** for you job as \`${user.rows[0].job}\``);
    }
}
exports.default = WorkCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29yay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lY29ub215L3dvcmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBeUM7QUFFekMsaUNBQWdDO0FBRWhDLE1BQXFCLFdBQVksU0FBUSx3QkFBTztJQUM5QztRQUNFLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDWixPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUM7WUFDakIsUUFBUSxFQUFFLFNBQVM7WUFDbkIsV0FBVyxFQUFFO2dCQUNYLE9BQU8sRUFBRSxpQ0FBaUM7YUFDM0M7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFnQjtRQUN6QixNQUFNLFNBQUksQ0FBQyxLQUFLLENBQ2QsdUVBQXVFLEVBQ3ZFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FDekMsQ0FBQztRQUVGLElBQUksSUFBSSxHQUFHLE1BQU0sU0FBSSxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRTtZQUNuRSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7U0FDbEIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtZQUM1QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFO2dCQUMzQixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsR0FBRyxHQUFHO29CQUNqRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7YUFDbkQ7WUFDRCxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsR0FBRyxHQUFHO2dCQUNqRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDbkQ7UUFFRCxJQUFJLFdBQVcsR0FBVyxDQUFDLENBQUM7UUFDNUIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxtQkFBbUIsRUFBRTtZQUM1QyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ3JEO1FBRUQsTUFBTSxTQUFJLENBQUMsS0FBSyxDQUNkOztzQkFFZ0IsRUFDaEIsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FDakMsQ0FBQztRQUVGLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ3RCLGdCQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsV0FBVyx1QkFBdUIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FDakcsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTdDRCw4QkE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kIH0gZnJvbSBcImRpc2NvcmQtYWthaXJvXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xyXG5pbXBvcnQgeyBwb29sIH0gZnJvbSBcIi4uLy4uL2RiXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXb3JrQ29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoXCJ3b3JrXCIsIHtcclxuICAgICAgYWxpYXNlczogW1wid29ya1wiXSxcclxuICAgICAgY2F0ZWdvcnk6IFwiZWNvbm9teVwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjoge1xyXG4gICAgICAgIGNvbnRlbnQ6IFwiR2l2ZXMgeW91IG1vbmV5IGZvciB5b3UgdG8gd29ya1wiLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBleGVjKG1lc3NhZ2U6IE1lc3NhZ2UpOiBQcm9taXNlPE1lc3NhZ2U+IHtcclxuICAgIGF3YWl0IHBvb2wucXVlcnkoXHJcbiAgICAgIFwiSU5TRVJUIElOVE8gdXNlcnMgKHVzZXJJRCwgam9iKSBWQUxVRVMoJDEsICQyKSBPTiBDT05GTElDVCBETyBOT1RISU5HXCIsXHJcbiAgICAgIFttZXNzYWdlLmF1dGhvci5pZCwgXCJnYXJiYWdlLWNvbGxlY3RvclwiXVxyXG4gICAgKTtcclxuXHJcbiAgICBsZXQgdXNlciA9IGF3YWl0IHBvb2wucXVlcnkoXCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJJRCA9ICQxXCIsIFtcclxuICAgICAgbWVzc2FnZS5hdXRob3IuaWQsXHJcbiAgICBdKTtcclxuICAgIGlmIChtZXNzYWdlLmF1dGhvci5pZCAhPSB0aGlzLmNsaWVudC5vd25lcklEKSB7XHJcbiAgICAgIGlmICh1c2VyLnJvd3NbMF0ucHJlbWl1bWFjYykge1xyXG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gdXNlci5yb3dzWzBdLmxhc3R3b3JrY29tbWFuZCA8IDNlNilcclxuICAgICAgICAgIHJldHVybiBtZXNzYWdlLnV0aWwuc2VuZChcIlRha2UgdGhlIGNoaWxsIHBpbGxcIik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKERhdGUubm93KCkgLSB1c2VyLnJvd3NbMF0ubGFzdHdvcmtjb21tYW5kIDwgNmU2KVxyXG4gICAgICAgIHJldHVybiBtZXNzYWdlLnV0aWwuc2VuZChcIlRha2UgdGhlIGNoaWxsIHBpbGxcIik7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJhbmRvbUNvaW5zOiBOdW1iZXIgPSAwO1xyXG4gICAgaWYgKHVzZXIucm93c1swXS5qb2IgPT09IFwiZ2FyYmFnZS1jb2xsZWN0b3JcIikge1xyXG4gICAgICByYW5kb21Db2lucyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDMwMCkgKyAxMDA7XHJcbiAgICB9XHJcblxyXG4gICAgYXdhaXQgcG9vbC5xdWVyeShcclxuICAgICAgYFVQREFURSB1c2Vyc1xyXG4gICAgU0VUIGNhc2ggPSBjYXNoICsgJDFcclxuICAgIFdIRVJFIHVzZXJJRCA9ICQyYCxcclxuICAgICAgW3JhbmRvbUNvaW5zLCBtZXNzYWdlLmF1dGhvci5pZF1cclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIG1lc3NhZ2UudXRpbC5zZW5kKFxyXG4gICAgICBgWW91J3ZlIGdvdCAqKiR7dGhpcy5jbGllbnQuZW1vdGVzLmNvaW59JHtyYW5kb21Db2luc30qKiBmb3IgeW91IGpvYiBhcyBcXGAke3VzZXIucm93c1swXS5qb2J9XFxgYFxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19