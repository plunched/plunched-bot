"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const db_1 = require("../../db");
class WorkCommand extends discord_akairo_1.Command {
    constructor() {
        super("work", {
            aliases: ["work"],
            category: "economy",
            description: {
                content: "Gives you money in exchange for an hour of work",
                usage: "work",
                examples: ["work"],
            },
        });
    }
    async exec(message) {
        await db_1.pool.query("INSERT INTO users (userID, job) VALUES($1, $2) ON CONFLICT DO NOTHING", [message.author.id, "garbage-collector"]);
        let user = await db_1.pool.query("SELECT * FROM users WHERE userID = $1", [
            message.author.id,
        ]);
        if (message.author.id != this.client.ownerID) {
            if (user.rows[0].premiumacc) {
                if (Date.now() - user.rows[0].lastworkcommand < 3e6)
                    return message.util.send("Take the chill pill");
            }
            if (Date.now() - user.rows[0].lastworkcommand < 6e6)
                return message.util.send("Take the chill pill");
        }
        let randomCoins = 0;
        if (user.rows[0].job === "garbage-collector") {
            randomCoins = Math.floor(Math.random() * 300) + 100;
        }
        await db_1.pool.query(`UPDATE users
    SET cash = cash + $1
    WHERE userID = $2`, [randomCoins, message.author.id]);
        return message.util.send(`You've got **${this.client.emotes.coin}${randomCoins}** for you job as \`${user.rows[0].job}\``);
    }
}
exports.default = WorkCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29yay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9lY29ub215L3dvcmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBeUM7QUFFekMsaUNBQWdDO0FBRWhDLE1BQXFCLFdBQVksU0FBUSx3QkFBTztJQUM5QztRQUNFLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDWixPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUM7WUFDakIsUUFBUSxFQUFFLFNBQVM7WUFDbkIsV0FBVyxFQUFFO2dCQUNYLE9BQU8sRUFBRSxpREFBaUQ7Z0JBQzFELEtBQUssRUFBRSxNQUFNO2dCQUNiLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQzthQUNuQjtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQWdCO1FBQ3pCLE1BQU0sU0FBSSxDQUFDLEtBQUssQ0FDZCx1RUFBdUUsRUFDdkUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxDQUN6QyxDQUFDO1FBRUYsSUFBSSxJQUFJLEdBQUcsTUFBTSxTQUFJLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxFQUFFO1lBQ25FLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtTQUNsQixDQUFDLENBQUM7UUFDSCxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO1lBQzVDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUU7Z0JBQzNCLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxHQUFHLEdBQUc7b0JBQ2pELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQzthQUNuRDtZQUNELElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxHQUFHLEdBQUc7Z0JBQ2pELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztTQUNuRDtRQUVELElBQUksV0FBVyxHQUFXLENBQUMsQ0FBQztRQUM1QixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLG1CQUFtQixFQUFFO1lBQzVDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7U0FDckQ7UUFFRCxNQUFNLFNBQUksQ0FBQyxLQUFLLENBQ2Q7O3NCQUVnQixFQUNoQixDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUNqQyxDQUFDO1FBRUYsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDdEIsZ0JBQWdCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxXQUFXLHVCQUF1QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUNqRyxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBL0NELDhCQStDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiZGlzY29yZC1ha2Fpcm9cIjtcclxuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XHJcbmltcG9ydCB7IHBvb2wgfSBmcm9tIFwiLi4vLi4vZGJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdvcmtDb21tYW5kIGV4dGVuZHMgQ29tbWFuZCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihcIndvcmtcIiwge1xyXG4gICAgICBhbGlhc2VzOiBbXCJ3b3JrXCJdLFxyXG4gICAgICBjYXRlZ29yeTogXCJlY29ub215XCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiB7XHJcbiAgICAgICAgY29udGVudDogXCJHaXZlcyB5b3UgbW9uZXkgaW4gZXhjaGFuZ2UgZm9yIGFuIGhvdXIgb2Ygd29ya1wiLFxyXG4gICAgICAgIHVzYWdlOiBcIndvcmtcIixcclxuICAgICAgICBleGFtcGxlczogW1wid29ya1wiXSxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZXhlYyhtZXNzYWdlOiBNZXNzYWdlKTogUHJvbWlzZTxNZXNzYWdlPiB7XHJcbiAgICBhd2FpdCBwb29sLnF1ZXJ5KFxyXG4gICAgICBcIklOU0VSVCBJTlRPIHVzZXJzICh1c2VySUQsIGpvYikgVkFMVUVTKCQxLCAkMikgT04gQ09ORkxJQ1QgRE8gTk9USElOR1wiLFxyXG4gICAgICBbbWVzc2FnZS5hdXRob3IuaWQsIFwiZ2FyYmFnZS1jb2xsZWN0b3JcIl1cclxuICAgICk7XHJcblxyXG4gICAgbGV0IHVzZXIgPSBhd2FpdCBwb29sLnF1ZXJ5KFwiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VySUQgPSAkMVwiLCBbXHJcbiAgICAgIG1lc3NhZ2UuYXV0aG9yLmlkLFxyXG4gICAgXSk7XHJcbiAgICBpZiAobWVzc2FnZS5hdXRob3IuaWQgIT0gdGhpcy5jbGllbnQub3duZXJJRCkge1xyXG4gICAgICBpZiAodXNlci5yb3dzWzBdLnByZW1pdW1hY2MpIHtcclxuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHVzZXIucm93c1swXS5sYXN0d29ya2NvbW1hbmQgPCAzZTYpXHJcbiAgICAgICAgICByZXR1cm4gbWVzc2FnZS51dGlsLnNlbmQoXCJUYWtlIHRoZSBjaGlsbCBwaWxsXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChEYXRlLm5vdygpIC0gdXNlci5yb3dzWzBdLmxhc3R3b3JrY29tbWFuZCA8IDZlNilcclxuICAgICAgICByZXR1cm4gbWVzc2FnZS51dGlsLnNlbmQoXCJUYWtlIHRoZSBjaGlsbCBwaWxsXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByYW5kb21Db2luczogTnVtYmVyID0gMDtcclxuICAgIGlmICh1c2VyLnJvd3NbMF0uam9iID09PSBcImdhcmJhZ2UtY29sbGVjdG9yXCIpIHtcclxuICAgICAgcmFuZG9tQ29pbnMgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzMDApICsgMTAwO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IHBvb2wucXVlcnkoXHJcbiAgICAgIGBVUERBVEUgdXNlcnNcclxuICAgIFNFVCBjYXNoID0gY2FzaCArICQxXHJcbiAgICBXSEVSRSB1c2VySUQgPSAkMmAsXHJcbiAgICAgIFtyYW5kb21Db2lucywgbWVzc2FnZS5hdXRob3IuaWRdXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBtZXNzYWdlLnV0aWwuc2VuZChcclxuICAgICAgYFlvdSd2ZSBnb3QgKioke3RoaXMuY2xpZW50LmVtb3Rlcy5jb2lufSR7cmFuZG9tQ29pbnN9KiogZm9yIHlvdSBqb2IgYXMgXFxgJHt1c2VyLnJvd3NbMF0uam9ifVxcYGBcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==